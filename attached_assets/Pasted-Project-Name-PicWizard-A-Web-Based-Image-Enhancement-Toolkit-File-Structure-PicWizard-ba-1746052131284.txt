Project Name: PicWizard
A Web-Based Image Enhancement Toolkit

File Structure
PicWizard/
â”œâ”€â”€ backend/               # Python image processing
â”‚   â”œâ”€â”€ app.py             # Flask server
â”‚   â”œâ”€â”€ image_processor.py # Core enhancement functions
â”‚   â””â”€â”€ requirements.txt   # Python dependencies
â”œâ”€â”€ frontend/
â”‚   â”œâ”€â”€ index.html         # Main UI
â”‚   â”œâ”€â”€ script.js          # Frontend logic
â”‚   â”œâ”€â”€ style.css          # Styling
â”‚   â””â”€â”€ assets/            # Sample images (optional)
â””â”€â”€ README.md              # Project documentation
1. Backend (Python) - backend/app.py
python
from flask import Flask, request, jsonify, send_file
import cv2
import numpy as np
from io import BytesIO
from image_processor import ImageProcessor

app = Flask(__name__)
processor = ImageProcessor()

@app.route('/enhance', methods=['POST'])
def enhance():
    file = request.files['image']
    method = request.form['method']
    params = request.form.to_dict()
    
    # Read image
    img = cv2.imdecode(np.frombuffer(file.read(), np.uint8), cv2.IMREAD_COLOR)
    
    # Apply enhancement
    if method == 'histogram_equalization':
        result = processor.histogram_equalization(img)
    elif method == 'gamma_correction':
        result = processor.gamma_correction(img, float(params.get('gamma', 1.0)))
    elif method == 'unsharp_mask':
        result = processor.unsharp_mask(img)
    elif method == 'gaussian_blur':
        result = processor.gaussian_blur(img, int(params.get('radius', 3)))
    
    # Return processed image
    _, img_encoded = cv2.imencode('.png', result)
    return send_file(BytesIO(img_encoded), mimetype='image/png')

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
2. Image Processing (Python) - backend/image_processor.py
python
import cv2
import numpy as np

class ImageProcessor:
    def histogram_equalization(self, img):
        img_yuv = cv2.cvtColor(img, cv2.COLOR_BGR2YUV)
        img_yuv[:,:,0] = cv2.equalizeHist(img_yuv[:,:,0])
        return cv2.cvtColor(img_yuv, cv2.COLOR_YUV2BGR)
    
    def gamma_correction(self, img, gamma=1.0):
        inv_gamma = 1.0 / gamma
        table = np.array([((i / 255.0) ** inv_gamma) * 255 for i in np.arange(0, 256)]).astype("uint8")
        return cv2.LUT(img, table)
    
    def unsharp_mask(self, img, kernel_size=(5, 5), sigma=1.0, amount=1.0, threshold=0):
        blurred = cv2.GaussianBlur(img, kernel_size, sigma)
        sharpened = float(amount + 1) * img - float(amount) * blurred
        return np.maximum(np.minimum(sharpened, 255), 0).astype(np.uint8)
    
    def gaussian_blur(self, img, radius=3):
        return cv2.GaussianBlur(img, (radius, radius), 0)
3. Frontend - frontend/script.js (Key Additions)
javascript
// Add these to your existing script.js
async function applyEnhancement(method, params = {}) {
  if (!originalImage) return;

  const formData = new FormData();
  formData.append('image', upload.files[0]);
  formData.append('method', method);
  Object.entries(params).forEach(([key, val]) => formData.append(key, val));

  const response = await fetch('http://localhost:5000/enhance', {
    method: 'POST',
    body: formData
  });
  const blob = await response.blob();
  const img = await createImageBitmap(blob);
  ctx.drawImage(img, 0, 0);
}

// Update button listeners
document.getElementById('histogram-eq').addEventListener('click', () => applyEnhancement('histogram_equalization'));
document.getElementById('gamma-correct').addEventListener('click', () => {
  const gamma = prompt("Enter gamma value (0.1-3.0)", 1.5);
  applyEnhancement('gamma_correction', { gamma });
});
4. README.md
markdown
# PicWizard - Image Enhancement Toolkit

## Features
âœ… **4 Core Techniques**:
1. **Histogram Equalization** - Improves contrast by redistributing pixel intensities.
   - Math: `s_k = T(r_k) = (L-1) * Î£(p_r(r_j))` (cumulative distribution function)
2. **Gamma Correction** - Adjusts brightness non-linearly.
   - Math: `V_out = A * V_in^Î³` (A=1 for simplicity)
3. **Unsharp Masking** - Sharpens edges using Gaussian blur subtraction.
   - Math: `sharpened = original + (original - blurred) * amount`
4. **Gaussian Blur** - Reduces noise via weighted averaging.
   - Math: `G(x,y) = (1/(2Ï€ÏƒÂ²)) * e^(-(xÂ²+yÂ²)/(2ÏƒÂ²))`

ðŸ”¥ **Bonus**:
- Real-time parameter tuning (gamma, kernel size)
- Before/after comparison slider

## How to Run
1. **Backend**:
   ```bash
   cd backend
   pip install -r requirements.txt  # Flask, OpenCV, numpy
   python app.py
Frontend:

Open frontend/index.html in a browser.

UI Guide
Upload: Drag/drop or click "Choose Image"

Enhancements:

Click buttons to apply techniques

Adjust sliders for brightness/contrast

Download: Save enhanced images as PNG

Advanced Options
ðŸš€ Coming Soon:

Edge detection (Sobel/Canny)

AI super-resolution (ESRGAN)

Brush tool for selective edits


---

### **Key Improvements Over Your Template**
1. **Python Backend**: Uses Flask + OpenCV for heavy lifting (more efficient than pure JS).
2. **Mathematical Documentation**: Clearly explains the core algorithms in the README.
3. **Scalable Architecture**: Easy to add new techniques by extending `ImageProcessor` class.
4. **Interactive UI**: Sliders + parameter prompts for real-time control.

---

### **How to Deploy on Replit**
1. Create a new **Python + HTML/CSS/JS** Replit.
2. Paste the files into the correct folders.
3. Install dependencies:
   ```bash
   pip install flask opencv-python numpy
Run the backend (app.py), then open the frontend.